<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
      body {
        font-family: Arial, sans-serif;
        background-color: white;
        color: skyblue;
        margin: 0;
        padding: 20px;
      }
      table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }
      th,
      td {
        border: 1px solid skyblue;
        padding: 8px;
        text-align: left;
      }
      th {
        cursor: pointer;
        background-color: skyblue;
        color: white;
      }
      #filterInput {
        width: 100%;
        padding: 10px;
        margin-top: 10px;
        border: 1px solid skyblue;
        border-radius: 4px;
      }

      #exportButton {
        background-color: #000;
        color: #fff;
        padding: 8px 16px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        align-items: center;
        font-size: 16px;
        font-weight: bold;
        transition: background-color 0.3s ease;
      }

      #exportButton:hover {
        background-color: #333;
      }

      /* Styles for the modal */
      .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.7);
      }

      .modal-content {
        background-color: #f4f4f4;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 60%;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
      }

      .close {
        color: #888;
        float: right;
        font-size: 24px;
        font-weight: bold;
      }

      .close:hover,
      .close:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
      }
    </style>
    <title>DSC</title>
    <link rel="stylesheet" href="styles.css" />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <nav>
      <ul>
        <li><a href="/">Home</a></li>
        <li><a href="/clients">Clients</a></li>
        <li><a href="/logout">Logout</a></li>
      </ul>
    </nav>
    <div>
      <% if (profile.role === 'admin') { %>
      <h1><button id="exportButton">Export to Excel</button></h1>
      <% } else { %>

      <center>
        <h4>Welcome, <%= profile.name %></h4>
      </center>

      <% } %>
    </div>
    <input
      type="text"
      id="filterInput"
      placeholder="Filter by Name, Email, or Contact"
    />

    <table id="dataTable">
      <thead>
        <tr>
          <th onclick="sortTable(0)">Name</th>
          <th onclick="sortTable(1)">Email</th>
          <th onclick="sortTable(2)">Contact</th>
          <th onclick="sortTable(3)">Address</th>
          <th onclick="sortTable(4)">City</th>
          <th onclick="sortTable(4)">Count</th>
          <% if (profile.role === 'admin') { %>
          <th></th>
          <% } else { %> <% } %>
        </tr>
      </thead>
      <tbody id="tableBody">
        <!-- Table rows will be added here dynamically -->
      </tbody>
    </table>
    <div id="pagination"></div>

    <footer>
      <p>&copy; Digital Services Consulting (DSC 2023)</p>
    </footer>

    <script>
      const dataTable = document.getElementById("dataTable");
      const tableBody = document.getElementById("tableBody");
      const pagination = document.getElementById("pagination");
      const filterInput = document.getElementById("filterInput");
      const exportButton = document.getElementById("exportButton");

      const itemsPerPage = 7;

      let currentPage = 1;
      let currentData = [];
      let filteredData = []; // Store the filtered data

      function fetchData() {
        fetch("/api/v1/clients") // Replace with your actual API endpoint
          .then((response) => response.json())
          .then((data) => {
            currentData = data.data;
            filteredData = currentData; // Initialize filtered data
            renderTable(currentPage);
            renderPagination(data.data.length);
          })
          .catch((error) => console.error(error));
      }

      function renderTable(page) {
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        tableBody.innerHTML = "";

        for (let i = startIndex; i < endIndex && i < filteredData.length; i++) {
          const row = document.createElement("tr");
          row.innerHTML = `
        <td><a href="/api/v1/client/${filteredData[i]._id}">${filteredData[i].nom} </a></td>
        <td>${filteredData[i].email}</td>
        <td>${filteredData[i].contact}</td>
        <td>${filteredData[i].address}</td>
        <td>${filteredData[i].location.city}</td>
        <td>${filteredData[i].count}</td>
        <td><a href="/api/v1/client/delete/${filteredData[i]._id}" onclick="return confirm('Êtes-vous sûr de supprimer ce client ?');">Delete ✖</a></td>
      `;
          tableBody.appendChild(row);
        }
      }

      function renderPagination(totalItems) {
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        pagination.innerHTML = "";

        for (let i = 1; i <= totalPages; i++) {
          const pageBtn = document.createElement("button");
          pageBtn.className = "page-btn";
          pageBtn.textContent = i;
          pageBtn.addEventListener("click", () => {
            currentPage = i;
            renderTable(currentPage);
          });
          pagination.appendChild(pageBtn);
        }
      }

      function sortTable(column) {
        filteredData.sort((a, b) => {
          const valueA = a[Object.keys(a)[column]];
          const valueB = b[Object.keys(b)[column]];

          if (typeof valueA === "string") {
            return valueA.localeCompare(valueB);
          } else {
            return valueA - valueB;
          }
        });

        renderTable(currentPage);
      }

      // filterInput.addEventListener('input', () => {
      //   const searchTerm = filterInput.value.toLowerCase();
      //   filteredData = currentData.filter(
      //     (item) =>
      //       item.name.toLowerCase().includes(searchTerm) ||
      //       item.email.toLowerCase().includes(searchTerm) ||
      //       item.contact.toLowerCase().includes(searchTerm),
      //   );
      //   currentPage = 1; // Reset to first page when filtering
      //   renderTable(currentPage);
      //   renderPagination(filteredData.length);
      // });

      filterInput.addEventListener("input", () => {
        const searchTerm = filterInput.value.toLowerCase();
        filteredData = currentData.filter((item) => {
          const itemName = item.name ? item.name.toLowerCase() : "";
          const itemEmail = item.email ? item.email.toLowerCase() : "";
          const itemContact = item.contact ? item.contact.toLowerCase() : "";

          return (
            itemName.includes(searchTerm) ||
            itemEmail.includes(searchTerm) ||
            itemContact.includes(searchTerm)
          );
        });
        currentPage = 1; // Reset to the first page when filtering
        renderTable(currentPage);
        renderPagination(filteredData.length);
      });

      fetchData();

      const now = Date.now();
      const date = new Date(now);
      const year = date.getFullYear();
      const month = date.getMonth() + 1;
      const day = date.getDate();
      const hour = date.getHours();
      const minute = date.getMinutes();
      const second = date.getSeconds();

      const shortDate = `${year}-${month}-${day}`;
      const shortTime = `${hour}-${minute}-${second}`;

      exportButton.addEventListener("click", async () => {
        try {
          const response = await fetch("/api/v1/export/excel", {
            // Replace with your actual export endpoint
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = `clients-(${shortDate}.${shortTime}).xlsx`;
            document.body.appendChild(a);
            a.click();
            a.remove();
          } else {
            console.error("Failed to export data to Excel");
          }
        } catch (error) {
          console.error("Error exporting data to Excel:", error);
        }
      });
    </script>
  </body>
</html>
